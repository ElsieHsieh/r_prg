as.Date()
library(magrittr)
straw_hat_df$birth_date1 <- Sys.Date() %>%
format( format='%Y') %>%
as.numeric() %>%
`-` (straw_hat_df$age) %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
source('D:/L_Coding/R/r_prg/midterm_05/pipe_midterm_05.R', echo=TRUE)
View(straw_hat_df)
source('D:/L_Coding/R/r_prg/midterm_05/pipe_midterm_05.R', echo=TRUE)
View(straw_hat_df)
my.sort <- function(input_vec){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
return(input_vec)
}
unsorted_vec <- runif(10)*100
my.sort(unsorted_vec)
View(my.sort)
my.sort <- function(input_vec){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
return(input_vec)
}
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec)
my.sort.dec <- function(input_vec){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
return(input_vec)
}
unsorted_vec <- round(runif(10)*100)
my.sort.dec(unsorted_vec)
my.sort <- function(input_vec,decreasing = FALSE){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(decreasing == TRUE){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}else{
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
}
return(input_vec)
}
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = TRUE)
my.sort <- function(input_vec,decreasing = FALSE){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(decreasing == TRUE){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}else{
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
}
return(input_vec)
}
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = TRUE)
my.sort <- function(input_vec,decreasing = FALSE){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(decreasing == TRUE){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}else{
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
}
return(input_vec)
}
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = TRUE)
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = FALSE)
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = FALSE)
sqrt(4)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt((1/n_minus_one)*summation)) #sqrt平方根
}
# Create an input
set.seed(9487)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(9487)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(87)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(87)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
BMI_calculator <- function(w,h){
h <- h/100
BMI <- w/h^2
return(BMI)
}
heights <- c(173, 168, 171, 189, 179)
weights <- c(65.4, 59.2, 63.6, 88.4, 68.7)
heights_and_weights <- data.frame(heights, weights)
BMIs <- mapply(FUN = BMI_calculator,w=weights,h=heights)
BMIs
heights_and_weights$BMI <- BMIs
View(heights_and_weights)
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
library(magrittr)
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
library(dplyr)
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(9487)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
setwd("D:/L_Coding/R/r_prg/final")
library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggthemes)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv', stringsAsFactors = F)
test  <- read.csv('kaggle_titanic_test.csv', stringsAsFactors = F)
titanic  <- bind_rows(train, test)
str(titanic)
#觀察登船港口遺漏資料
#發現他們的Fare都是80元，Passenger Class是1
embark_missing <- titanic %>%
filter(Embarked == "")
head(embark_missing)
#過濾掉Embarked遺漏值
embark_fare <- titanic %>%
filter(Embarked != "")
#以登船港口和乘客等級分別繪製票價盒鬚圖
#發現票價80元與C港口高階乘客票價中位數差不多，故將Embarked兩個遺漏值指派為C
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot()
titanic$Embarked[titanic$Embarked == ""] <- "C"
#挑出遺漏Fare的資料來觀看
#Pclass == '3', Embarked == 's' 觀察符合這些條件的票價情況
fare_missing <- subset(titanic,is.na(titanic$Fare))
third_s <- titanic[titanic$Pclass == '3' & titanic$Embarked == 'S', ]
fare_density <- ggplot(third_s , aes(x = Fare)) +
geom_density(fill = '#2fb8be',alpha=0.5) +
ggtitle("")
ggplotly(fare_density)
#Fare最多為8左右，與Fare的中位數差不多
summary(third_s$Fare)
#
titanic$Fare[is.na(titanic$Fare)] <- median(third_s$Fare, na.rm = TRUE)
names(titanic)
set.seed(9487)
mice_mod <- mice(titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
summary(mice_mod)
View(mice_mod)
mice_output <- complete(mice_mod)
View(mice_output)
View(mice_output)
?mice
mice_data <- titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')]
mice_result <- mice(mice_data, method='rf',seed = 9487)
mice_output <- complete(mice_result)
View(mice_output)
set.seed(9487)
mice_data <- titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')]
mice_result <- mice(mice_data, method='rf',seed = 9487)
mice_output <- complete(mice_result)
View(mice_output)
par(mfrow=c(1,2))
hist(titanic$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
hist(titanic$Fare, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(titanic$Fare, freq=F, main='Age: Original Data',
col='darkgreen')
hist(titanic$Fare, main='Age: Original Data',
col='darkgreen')
titanic$Age <- mice_output$Age
View(titanic)
View(titanic)
train <- titanic[1:891,]
test <- titanic[892:1309,]
set.seed(9487)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 100)
train <- titanic[1:891,]
View(train <- titanic[1:891,])
summary(train)
set.seed(9487)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 100)
forest_fit
set.seed(87)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 100)
set.seed(87)
forest_fit <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 100)
train <- titanic[1:891,]
test <- titanic[892:1309,]
titanic$Survived <- factor(titanic$Survived)
set.seed(87)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
library(randomForest)
set.seed(87)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggthemes)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv', stringsAsFactors = F)
test  <- read.csv('kaggle_titanic_test.csv', stringsAsFactors = F)
titanic  <- bind_rows(train, test)
str(titanic)
#觀察登船港口遺漏資料
#發現他們的Fare都是80元，Passenger Class是1
embark_missing <- titanic %>%
filter(Embarked == "")
head(embark_missing)
#過濾掉Embarked遺漏值
embark_fare <- titanic %>%
filter(Embarked != "")
#以登船港口和乘客等級分別繪製票價盒鬚圖
#發現票價80元與C港口高階乘客票價中位數差不多，故將Embarked兩個遺漏值指派為C
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot()
titanic$Embarked[titanic$Embarked == ""] <- "C"
#挑出遺漏Fare的資料來觀看
#Pclass == '3', Embarked == 's' 觀察符合這些條件的票價情況
fare_missing <- subset(titanic,is.na(titanic$Fare))
third_s <- titanic[titanic$Pclass == '3' & titanic$Embarked == 'S', ]
fare_density <- ggplot(third_s , aes(x = Fare)) +
geom_density(fill = '#2fb8be',alpha=0.5) +
ggtitle("")
ggplotly(fare_density)
#這些條件下Fare最多落在8左右，與其中位數差不多，故以此填補Fare遺漏值
summary(third_s$Fare)
titanic$Fare[is.na(titanic$Fare)] <- median(third_s$Fare, na.rm = TRUE)
mice_data <- titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')]
mice_result <- mice(mice_data, method='rf',seed = 9487)
mice_output <- complete(mice_result)
titanic$Age <- mice_output$Age
titanic$Survived <- factor(titanic$Survived)
#建模型
train <- titanic[1:891,]
test <- titanic[892:1309,]
set.seed(87)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
forest_fit
summary(train$Age)
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
View(tree_fit)
predicted <- predict(tree_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
to_submit <- data.frame(test[, "PassengerId"], predicted)
#to_submit <- data.frame(PassengerId=to_predict$PassengerId, Survived=predicted)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
View(to_submit)
rm(to_submit)
View(predicted)
prediction <- predict(tree_fit, test)
View(prediction)
View(test)
setwd("D:/L_Coding/R/r_prg/note")
url = "https://storage.googleapis.com/2017_ithome_ironman/data/kaggle_titanic_train.csv"
titanic <- read.csv(url)
titanic <- titanic[complete.cases(titanic), ] #取完整的資料筆數
# Embarked 有兩個空值，以 S 填補
titanic$Embarked <- as.character(titanic$Embarked)
titanic$Embarked[titanic$Embarked == ""] <- "S"
titanic$Embarked <- factor(titanic$Embarked)
titanic$Survived <- factor(titanic$Survived)
n <- nrow(titanic)
set.seed(80) #為了讓洗牌的sample一致，不然每次洗牌結果會不一樣
shuffled_titanic <- titanic[sample(n), ]
#洗牌，sample是隨機抽樣的意思，抽完不放回，所以抽全部等於把全部的順序弄散
#分割訓練/測試樣本
train_indices <- 1:round(0.7 * n)
train <- shuffled_titanic[train_indices, ]
test_indices <- (round(0.7 * n) + 1):n
test <- shuffled_titanic[test_indices, ]
library(rpart)
#分類模型
#把要預測的y放在~的左邊，而~右邊放要用來預測的x變數們
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
#預測是生還死，跟test本身的survived去比對
#用test資料集，以及設定指定欄位
prediction <- predict(tree_fit, test[, c("Pclass", "Sex", "Age", "SibSp",
"Parch", "Fare", "Embarked")], type = "class")
View(prediction)
confusion_matrix <- table(test$Survived, prediction)
confusion_matrix
#隨機森林模型是決策樹的加強版
library(randomForest)
#要把目標變數先轉成factor <- line 4
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , data = train, ntree = 200)
Forest_prediction <- predict(Forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
#沒有存活答案的資料集
library(dplyr)
library(magrittr)
url <- "https://storage.googleapis.com/py_ds_basic/kaggle_titanic_test.csv"
to_predict <- read.csv(url)
summary(to_predict)
#把missing的fare value填補
mean_fare <- mean(to_predict$Fare,na.rm=TRUE)
to_predict$Fare[is.na(to_predict$Fare)] <- mean_fare
summary(to_predict$Fare)
#na.rm=TRUE 把NA值移除
#round()取整數
mean_age_by_Pclass <- to_predict %>%
group_by(Pclass) %>%
summarise(mean_age = round(mean(Age,na.rm=TRUE)))
#分出三種階級中age是NA的筆數
filter_1 <- is.na(to_predict$Age) & to_predict$Pclass == 1
filter_2 <- is.na(to_predict$Age) & to_predict$Pclass == 2
filter_3 <- is.na(to_predict$Age) & to_predict$Pclass == 3
to_predict[filter_1, ]$Age <- 41
to_predict[filter_2, ]$Age <- 29
to_predict[filter_3, ]$Age <- 24
# Summary after imputation
summary(to_predict)
predicted <- predict(Forest_fit, newdata = to_predict[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
to_submit <- data.frame(to_predict[, "PassengerId"], predicted)
#to_submit <- data.frame(PassengerId=to_predict$PassengerId, Survived=predicted)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
View(predicted)
View(to_submit)
to_submit
predicted
setwd("D:/L_Coding/R/r_prg/final")
library(ggplot2)
library(ggthemes)
library(dplyr)
library(ggthemes)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv', stringsAsFactors = F)
test  <- read.csv('kaggle_titanic_test.csv', stringsAsFactors = F)
titanic  <- bind_rows(train, test)
str(titanic)
#觀察登船港口遺漏資料
#發現他們的Fare都是80元，Passenger Class是1
embark_missing <- titanic %>%
filter(Embarked == "")
head(embark_missing)
#過濾掉Embarked遺漏值
embark_fare <- titanic %>%
filter(Embarked != "")
#以登船港口和乘客等級分別繪製票價盒鬚圖
#發現票價80元與C港口高階乘客票價中位數差不多，故將Embarked兩個遺漏值指派為C
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot()
titanic$Embarked[titanic$Embarked == ""] <- "C"
#挑出遺漏Fare的資料來觀看
#Pclass == '3', Embarked == 's' 觀察符合這些條件的票價情況
fare_missing <- subset(titanic,is.na(titanic$Fare))
third_s <- titanic[titanic$Pclass == '3' & titanic$Embarked == 'S', ]
fare_density <- ggplot(third_s , aes(x = Fare)) +
geom_density(fill = '#2fb8be',alpha=0.5) +
ggtitle("")
ggplotly(fare_density)
#這些條件下Fare最多落在8左右，與其中位數差不多，故以此填補Fare遺漏值
summary(third_s$Fare)
titanic$Fare[is.na(titanic$Fare)] <- median(third_s$Fare, na.rm = TRUE)
mice_data <- titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')]
mice_result <- mice(mice_data, method='rf',seed = 9487)
mice_output <- complete(mice_result)
titanic$Age <- mice_output$Age
titanic$Survived <- factor(titanic$Survived)
#建模型
train <- titanic[1:891,]
test <- titanic[892:1309,]
set.seed(87)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
redicted <- predict(tree_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
rm(redicted)
predicted <- predict(tree_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
predicted
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
predicted <- predict(tree_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
predicted
View(train)
predicted <- predict(tree_fit,
newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")],
type = "class")
predicted
prediction <- predict(tree_fit, test,type = "class")
prediction
to_submit <- data.frame(test[, "PassengerId"], predicted)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
write.csv(to_submit,file="to_be_submitted.csv",row.names = FALSE)
