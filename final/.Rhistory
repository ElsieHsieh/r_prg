if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
return(input_vec)
}
unsorted_vec <- runif(10)*100
my.sort(unsorted_vec)
View(my.sort)
my.sort <- function(input_vec){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
return(input_vec)
}
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec)
my.sort.dec <- function(input_vec){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
return(input_vec)
}
unsorted_vec <- round(runif(10)*100)
my.sort.dec(unsorted_vec)
my.sort <- function(input_vec,decreasing = FALSE){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(decreasing == TRUE){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}else{
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
}
return(input_vec)
}
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = TRUE)
my.sort <- function(input_vec,decreasing = FALSE){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(decreasing == TRUE){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}else{
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
}
return(input_vec)
}
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = TRUE)
my.sort <- function(input_vec,decreasing = FALSE){
vector_length <- length(input_vec)
for(i in 1:(vector_length-1)){
for(j in (i+1):vector_length){
if(decreasing == TRUE){
if(input_vec[i]<input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}else{
if(input_vec[i]>input_vec[j]){
box <- input_vec[i]
input_vec[i] <- input_vec[j]
input_vec[j] <- box
}
}
}
}
return(input_vec)
}
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = TRUE)
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = FALSE)
set.seed(9487)
unsorted_vec <- round(runif(10)*100)
my.sort(unsorted_vec,decreasing = FALSE)
sqrt(4)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt((1/n_minus_one)*summation)) #sqrt平方根
}
# Create an input
set.seed(9487)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(9487)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(87)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(87)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
BMI_calculator <- function(w,h){
h <- h/100
BMI <- w/h^2
return(BMI)
}
heights <- c(173, 168, 171, 189, 179)
weights <- c(65.4, 59.2, 63.6, 88.4, 68.7)
heights_and_weights <- data.frame(heights, weights)
BMIs <- mapply(FUN = BMI_calculator,w=weights,h=heights)
BMIs
heights_and_weights$BMI <- BMIs
View(heights_and_weights)
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
library(magrittr)
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
library(dplyr)
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
my.sd <- function(input_vec){
x_bar <- mean(input_vec)
n_minus_one <- length(input_vec)-1
summation <- 0
for(x_i in input_vec){
summation <- summation+(x_i-x_bar)^2
}
return(sqrt(summation/n_minus_one)) #sqrt平方根
}
set.seed(9487)
my_seq <- round(runif(10)*100)
my.sd(my_seq)
setwd("D:/L_Coding/R/r_prg/final")
library(ggplot2)
library(dplyr)
library(ggthemes)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv', stringsAsFactors = F)
test  <- read.csv('kaggle_titanic_test.csv', stringsAsFactors = F)
titanic  <- bind_rows(train, test)
str(titanic)
summary(titanic)
titanic$Embarked <- as.character(titanic$Embarked)
summary(titanic)
library(ggplot2)
library(dplyr)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv')
test  <- read.csv('kaggle_titanic_test.csv')
titanic  <- bind_rows(train, test)
summary(titanic)
rm(titanic)
train <- read.csv('kaggle_titanic_train.csv')
test  <- read.csv('kaggle_titanic_test.csv')
titanic  <- bind_rows(train, test)
summary(train)
?bind_rows
?mice
library(ggplot2)
library(dplyr)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv')
test  <- read.csv('kaggle_titanic_test.csv')
titanic  <- bind_rows(train, test)
summary(train)
#觀察登船港口遺漏資料
#發現他們的Fare都是80元，Passenger Class是1
embark_missing <- titanic %>%
filter(Embarked == "")
head(embark_missing)
#過濾掉Embarked遺漏值
embark_fare <- titanic %>%
filter(Embarked != "")
#以登船港口和乘客等級分別繪製票價盒鬚圖
#發現票價80元與C港口高階乘客票價中位數差不多，故將Embarked兩個遺漏值指派為C
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot()
titanic$Embarked[titanic$Embarked == ""] <- "C"
#挑出遺漏Fare的資料來觀看
#Pclass == '3', Embarked == 's' 觀察符合這些條件的票價情況
fare_missing <- subset(titanic,is.na(titanic$Fare))
third_s <- titanic[titanic$Pclass == '3' & titanic$Embarked == 'S', ]
fare_density <- ggplot(third_s , aes(x = Fare)) +
geom_density(fill = '#2fb8be',alpha=0.5) +
ggtitle("")
ggplotly(fare_density)
#這些條件下Fare最多落在8左右，與其中位數差不多，故以此填補Fare遺漏值
summary(third_s$Fare)
titanic$Fare[is.na(titanic$Fare)] <- median(third_s$Fare, na.rm = TRUE)
mice_data <- titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')]
mice_result <- mice(mice_data, method='cart',seed = 9487)
mice_output <- complete(mice_result)
titanic$Age <- mice_output$Age
titanic$Survived <- factor(titanic$Survived)
#建模型
train <- titanic[1:891,]
test <- titanic[892:1309,]
set.seed(87)
#forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
predicted <- predict(tree_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")],type = "class")
# prediction <- predict(tree_fit, test, type = "class")
to_submit <- data.frame(test[, "PassengerId"], predicted)
#to_submit <- data.frame(PassengerId=to_predict$PassengerId, Survived=predicted)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
write.csv(to_submit,file="to_be_submitted_cart.csv",row.names = FALSE)
?complete
mice_result
mice_output
?complete
?complete
require(rpart.plot)
prp(tree_fit,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
complete
require(rpart.plot)
prp(tree_fit,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
install.packages("rpart.plot")
library(rpart.plot)
prp(tree_fit,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
prp(tree_fit,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=FALSE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
prp(tree_fit,         # 模型
faclen=1,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
prp(tree_fit,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
library(ggplot2)
library(dplyr)
library(scales)
library(mice)
library(rpart)
library(randomForest)
library(plotly)
train <- read.csv('kaggle_titanic_train.csv')
test  <- read.csv('kaggle_titanic_test.csv')
titanic  <- bind_rows(train, test)
embark_missing <- titanic %>%
filter(Embarked == "")
embark_fare <- titanic %>%
filter(Embarked != "")
titanic$Embarked[titanic$Embarked == ""] <- "C"
fare_missing <- subset(titanic,is.na(titanic$Fare))
third_s <- titanic[titanic$Pclass == '3' & titanic$Embarked == 'S', ]
titanic$Fare[is.na(titanic$Fare)] <- median(third_s$Fare, na.rm = TRUE)
mice_data <- titanic[, !names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')]
mice_result <- mice(mice_data, method='rf',seed = 9487)
mice_output <- complete(mice_result)
titanic$Age <- mice_output$Age
titanic$Survived <- factor(titanic$Survived)
train <- titanic[1:891,]
test <- titanic[892:1309,]
set.seed(87)
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , data = train, ntree = 200)
titanic$Embarked <- factor(titanic$Embarked)
train <- titanic[1:891,]
test <- titanic[892:1309,]
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , data = train, ntree = 200)
Forest_prediction <- predict(Forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
Forest_prediction
to_submit <- data.frame(test[, "PassengerId"], Forest_prediction)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
write.csv(to_submit,file="to_be_submitted_rf.csv",row.names = FALSE)
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=30)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = TRUE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=30)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
ggplot(data = Forest_prediction, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
View(train)
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
train <- read.csv('kaggle_titanic_train.csv')
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
train <- titanic[1:891,]
train$Survived <- as.integer(trsin$Survived)
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
train <- read.csv('kaggle_titanic_train.csv')
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
train <- titanic[1:891,]
train$Survived <- as.integer(train$Survived)
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
train <- titanic[1:891,]
train$Survived <-as.numeric(as.character(train$Survived))
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme_classic() +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#64B5F6"))
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#EF5350", "#20b2aa"))
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#ff7f50", "#2fb8be"))
train <- read.csv('kaggle_titanic_train.csv')
test  <- read.csv('kaggle_titanic_test.csv')
titanic  <- bind_rows(train, test)
ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
theme(text = element_text(size=20)) +
scale_color_manual(values = c("#ff7f50", "#2fb8be")) +
ggtitle("各階級與各年齡層男女性生存情形散佈圖")
knitr::opts_chunk$set(echo = TRUE)
fare_density <- ggplot(third_s , aes(x = Fare)) +
geom_density(fill = '#2fb8be',alpha=0.5) +
ggtitle("")
ggplotly(fare_density)
fare_density <- ggplot(third_s , aes(x = Fare)) +
geom_density(fill = '#2fb8be',alpha=0.5) +
ggtitle("南安普敦港口上船的第三階級乘客票價")
ggplotly(fare_density)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
ggtitle("登船港口和乘客等級之票價盒鬚圖")
InteractiveBoxplot <- ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
ggtitle("登船港口和乘客等級之票價盒鬚圖")
ggplotly(InteractiveBoxplot)
InteractiveScatter <- ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
scale_color_manual(values = c("#ff7f50", "#2fb8be")) +
ggtitle("各階級與各年齡層男女性的生存情形散佈圖")
plotly(InteractiveScatter)
InteractiveScatter <- ggplot(data = train, aes(x = Age, y = Survived, color = Sex)) +
geom_point(alpha = 0.2) +
geom_smooth(se = FALSE) +
facet_grid(Pclass ~ .) +
scale_color_manual(values = c("#ff7f50", "#2fb8be")) +
ggtitle("各階級與各年齡層男女性的生存情形散佈圖")
ggplotly(InteractiveScatter)
