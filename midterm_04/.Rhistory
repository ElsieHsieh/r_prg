return(DWP_mean)
}
function(){
DWP_mean <- vector("numeric",length=2008:2014)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean[i] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
DWP_mean
function(){
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
for(j in c(1:7)){
DWP_mean[j] <- mean(DWP_num)}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
DWP_mean
function(){
DWP_mean <- vector("numeric",length=7)
for(j in c(1:7)){
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
}
DWP_mean[j] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean[2] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean <- c(mean(DWP_num))
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
for(j in c(1:7)){
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
for(j in c(1:7)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
formatdate <- format(as.Date(water_json$Year,format = "%Y/%m/%d"),format="%Y")
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
for(j in c(1:7)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
library(jsonlite)
url <- "http://opendata.epa.gov.tw/ws/Data/WAT00328/?%24skip=0&%24top=1000&format=json"
water_json <- fromJSON(url)
#2008~2014年平均每人每日用水量變化
formatdate <- format(as.Date(water_json$Year,format = "%Y/%m/%d"),format="%Y")
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
for(j in c(1:7)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
for(j in c(1:7)){
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
print(mean_result)
for(j in c(1:7)){
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
print(mean_result)
DWP_mean[i-2007] <- mean_result
# mean_array <- rbind(mean_array,mean(DWP_num))
}
DWP_mean
year <- c(2008:2014)
DWP_year <- cbind(year,DWP_mean)
colnames(DWP_year) <- c("year","DWP_mean")
DWP_year
year <- c(2008:2014)
DWP_year_mean <- data.frame(year, DWP_mean)
DWP_year_mean
library(jsonlite)
url <- "http://opendata.epa.gov.tw/ws/Data/WAT00328/?%24skip=0&%24top=1000&format=json"
water_json <- fromJSON(url)
plot(water_json$DailyWaterPerPerson, water_json$PopulationServed, main = "每人每日生活用水量 vs. 供水人數 ", xlab = "DailyWaterPerPerson", ylab = "PopulationServed")
Taipei <- water_json[water_json$ExecutingUnit=="臺北市",]
Year_Date <- as.Date(Taipei$Year,format = "%Y/%m/%d")
Year_Taipei <- format(Year_Date,format="%Y")
PopulationServed_Taipei <- as.numeric(Taipei$PopulationServed)
plot(Year_Taipei, PopulationServed_Taipei, type = "l", main = "2008年到2014年臺北市生活用水量", xlab = "Year", ylab = "用水量")
TPE <- water_json[grep("臺北",water_json$ExecutingUnit),]
Taoyuan  <- water_json[grep("桃園",water_json$ExecutingUnit),]
Taichung <- water_json[grep("臺中",water_json$ExecutingUnit),]
Tainan <- water_json[grep("臺南",water_json$ExecutingUnit),]
NewTai <- water_json[grep("新北",water_json$ExecutingUnit),]
Kaohsiung <- water_json[grep("高雄",water_json$ExecutingUnit),]
Six_City <- rbind(TPE,Taoyuan,Taichung,Tainan,NewTai,Kaohsiung)
NewTaipeiCity <- gsub("臺北縣", "新北市", Six_City$ExecutingUnit)
New_City_Name <- gsub("縣", "市", NewTaipeiCity)
Six_City <- cbind(Six_City,New_City_Name)
Six_City_2014 <- Six_City[format(as.Date(Six_City$Year,format = "%Y/%m/%d"),format="%Y")==2014,]
#par(mfrow = c(3, 2)) # 建立一個 1x2 的網格畫布
hist(as.numeric(water_json$DailyWaterPerPerson), main = "Distribution of DailyWater Per Person")
boxplot(as.numeric(Six_City$DailyWaterPerPerson) ~ Six_City$New_City_Name, main = "2008-2014年六都每人每日用水量",ylab="公升")
#2008~2014年平均每人每日用水量變化
formatdate <- format(as.Date(water_json$Year,format = "%Y/%m/%d"),format="%Y")
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
print(mean_result)
DWP_mean[i-2007] <- mean_result
# mean_array <- rbind(mean_array,mean(DWP_num))
}
year <- c(2008:2014)
DWP_year_mean <- data.frame(year, DWP_mean)
barplot(DWP_year_mean$DWP_mean)
DWP_year_mean
barplot(DWP_year_mean$DWP_mean,names = DWP_year_mean$year)
installr::updateR(keep_install_file=TRUE)
install.packages(installr)
install.packages(installr::updateR(keep_install_file=TRUE))
updateR(keep_install_file=TRUE)
updateR()
install.packages("installr")
require(installr)
updateR()
source('D:/L_Coding/R/r_prg/midterm_05/pipe_midterm_05.R', echo=TRUE)
rm(list=ls())
source('D:/L_Coding/R/r_prg/midterm_05/pipe_midterm_05.R', echo=TRUE)
straw_hat_df$birth_date <- Sys.Date() %>%
formate('%Y') %>%
as.numeric() %>%
`-`straw_hat_df$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
load(url("https://storage.googleapis.com/r_rookies/straw_hat_df.RData"))
straw_hat_df$birth_date <- Sys.Date() %>%
formate('%Y') %>%
as.numeric() %>%
`-`straw_hat_df$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
straw_hat_df$birth_date <- Sys.Date() %>%
formate('%Y') %>%
as.numeric() %>%
`-`$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
library(magrittr)
straw_hat_df$birth_date <- Sys.Date() %>%
formate('%Y') %>%
as.numeric() %>%
`-`$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
library(magrittr)
straw_hat_df$birth_date <- Sys.Date() %>%
format('%Y') %>%
as.numeric() %>%
`-`$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
library(magrittr)
straw_hat_df$birth_date <- Sys.Date() %>%
format('%Y') %>%
as.numeric() %>%
`-`straw_hat_df$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
library(magrittr)
straw_hat_df$birth_date <- Sys.Date() %>%
format('%Y') %>%
as.numeric() %>%
`-` straw_hat_df$age %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
class(straw_hat_df$age)
library(magrittr)
straw_hat_df$birth_date <- Sys.Date() %>%
format( format='%Y') %>%
as.numeric() %>%
`-` (straw_hat_df$age) %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
straw_hat_df$birth_date
load(url("https://storage.googleapis.com/r_rookies/straw_hat_df.RData"))
this_year <- as.numeric(format(Sys.Date(), '%Y'))
birth_year <- this_year - straw_hat_df$age
birth_date_chr <- paste(birth_year, straw_hat_df$birthday, sep = "-")
straw_hat_df$birth_date <- as.Date(birth_date_chr)
library(magrittr)
straw_hat_df$birth_date1 <- Sys.Date() %>%
format( format='%Y') %>%
as.numeric() %>%
`-` (straw_hat_df$age) %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
View(straw_hat_df)
straw_hat_df$birth_date1 <- Sys.Date() %>%
format( format='%Y') %>%
as.numeric() %>%
`-` (straw_hat_df$age) %>%
paste(.,straw_hat_df$birthday, sep = "-") %>%
as.Date()
library(magrittr)
straw_hat_df$birth_date1 <- Sys.Date() %>%
format( format='%Y') %>%
as.numeric() %>%
`-` (straw_hat_df$age) %>%
paste(straw_hat_df$birthday, sep = "-") %>%
as.Date()
source('D:/L_Coding/R/r_prg/midterm_05/pipe_midterm_05.R', echo=TRUE)
View(straw_hat_df)
source('D:/L_Coding/R/r_prg/midterm_05/pipe_midterm_05.R', echo=TRUE)
View(straw_hat_df)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
url = "https://storage.googleapis.com/2017_ithome_ironman/data/kaggle_titanic_train.csv"
titanic <- read.csv(url)
View(titanic)
titanic <- titanic[complete.cases(titanic), ] #取完整的資料筆數
titanic$Survived <- factor(titanic$Survived)
n <- nrow(titanic)
shuffled_titanic <- titanic[sample(n), ] #洗牌
head(shuffled_titanic)
head(titanic)
url = "https://storage.googleapis.com/2017_ithome_ironman/data/kaggle_titanic_train.csv"
titanic <- read.csv(url)
titanic <- titanic[complete.cases(titanic), ] #取完整的資料筆數
titanic$Survived <- factor(titanic$Survived)
n <- nrow(titanic)
set.seed(87) #為了讓洗牌的sample一致，不然每次洗牌結果會不一樣
shuffled_titanic <- titanic[sample(n), ] #洗牌
head(titanic)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
head(titanic)
head(shuffled_titanic)
train_indices <- 1:round(0.7 * n)
View(train_indices)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
install.packages("rpart")
set.seed(87)
head(sample(n))
head(sample(n))
set.seed(87)
head(sample(n))
set.seed(87)
head(sample(n))
head(sample(n))
head(sample(n))
names(train)
?rpart
?rpart
library(rpart)
#分類模型
#把要預測的y放在~的左邊，而~右邊放要用來預測的x變數們
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
library(rpart)
#分類模型
#把要預測的y放在~的左邊，而~右邊放要用來預測的x變數們
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
?rpart
tree_fit
library(rpart)
#分類模型
#把要預測的y放在~的左邊，而~右邊放要用來預測的x變數們
tree_fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
#預測是生還死，跟test本身的survived去比對
#用test資料集，以及設定指定欄位
prediction <- predict(tree_fit, test[, c("Pclass", "Sex", "Age", "SibSp",
"Parch", "Fare", "Embarked")], type = "class")
prediction
(test$Survived)
test$Survived
confusion_matrix <- table(test$Survived, prediction)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy
confusion_matrix
setwd("D:/L_Coding/R/r_prg/note")
install.packages("randomForest")
#隨機森林模型是決策樹的加強版
library(randomForest)
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 100)
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 200)
Forest_prediction <- predict(forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
library(randomForest)
#要把目標變數先轉成factor <- line 4
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 200)
Forest_prediction <- predict(forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
library(randomForest)
#要把目標變數先轉成factor <- line 4
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 600)
Forest_prediction <- predict(forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
#隨機森林模型是決策樹的加強版
library(randomForest)
#要把目標變數先轉成factor <- line 4
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 600)
Forest_prediction <- predict(Forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
confusion_matrix
Forest_confusion_matrix
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
confusion_matrix
Forest_confusion_matrix
library(randomForest)
#要把目標變數先轉成factor <- line 4
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 800)
Forest_prediction <- predict(Forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
Forest_confusion_matrix
confusion_matrix
#隨機森林模型是決策樹的加強版
library(randomForest)
#要把目標變數先轉成factor <- line 4# + Embarked
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data = train, ntree = 800)
#, "Embarked"
Forest_prediction <- predict(Forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
#隨機森林模型是決策樹的加強版
library(randomForest)
#要把目標變數先轉成factor <- line 4# + Embarked
Forest_fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data = train, ntree = 200)
#, "Embarked"
Forest_prediction <- predict(Forest_fit, newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")])
Forest_confusion_matrix <- table(test$Survived, Forest_prediction)
Forest_accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
Forest_accuracy
confusion_matrix
Forest_confusion_matrix
url <- "https://storage.googleapis.com/py_ds_basic/kaggle_titanic_test.csv"
to_predict <- read.csv(url)
summary(to_predict)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_kaggle.R', encoding = 'UTF-8', echo=TRUE)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_kaggle.R', encoding = 'UTF-8', echo=TRUE)
mean_fate
mean_fare
mean_fare <- mean(to_predict$Fare,na.rm=TRUE)
to_predict$Fare[is.na(to_predict$Fare)] <- mean_fare
to_predict$Fare
source('D:/L_Coding/R/r_prg/note/NTU_R_126_kaggle.R', encoding = 'UTF-8', echo=TRUE)
library(dplyr)
library(magrittr)
#沒有存活答案的資料集
url <- "https://storage.googleapis.com/py_ds_basic/kaggle_titanic_test.csv"
to_predict <- read.csv(url)
summary(to_predict)
#把missing的fare value填補
mean_fare <- mean(to_predict$Fare,na.rm=TRUE)
to_predict$Fare[is.na(to_predict$Fare)] <- mean_fare
summary(to_predict$Fare)
#na.rm=TRUE 把NA值移除
to_predict %>%
group_by(Pclass) %>%
summarise(mean_age = mean(Age,na.rm=TRUE)) %>%
View()
to_predict %>%
group_by(Pclass) %>%
summarise(mean_age = round(mean(Age,na.rm=TRUE))) %>%
View()
#分出三種階級中age是NA的筆數
filter_1 <- is.na(to_predict$Age) & to_predict$Pclass == 1
filter_2 <- is.na(to_predict$Age) & to_predict$Pclass == 2
filter_3 <- is.na(to_predict$Age) & to_predict$Pclass == 3
mean_age_by_Pclass
#na.rm=TRUE 把NA值移除
#round()取整數
mean_age_by_Pclass <- to_predict %>%
group_by(Pclass) %>%
summarise(mean_age = round(mean(Age,na.rm=TRUE))) %>%
View()
#分出三種階級中age是NA的筆數
filter_1 <- is.na(to_predict$Age) & to_predict$Pclass == 1
filter_2 <- is.na(to_predict$Age) & to_predict$Pclass == 2
filter_3 <- is.na(to_predict$Age) & to_predict$Pclass == 3
mean_age_by_Pclass
mean_age_by_Pclass <- to_predict %>%
group_by(Pclass) %>%
summarise(mean_age = round(mean(Age,na.rm=TRUE)))
mean_age_by_Pclass
head(titanic$Embarked)
table(titanic$Embarked)
source('D:/L_Coding/R/r_prg/note/NTU_R_126_Classification.R', encoding = 'UTF-8', echo=TRUE)
summary(to_predict)
predicted <- predict(Forest_fit, newdata = to_predict[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
to_submit <- data.frame(to_predict[, "PassengerId"], predicted)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
table(predict())
table(predicted
table(predicted)
table(predicted)
table(to_predict)
predicted
summary(to_predict)
predicted <- predict(Forest_fit, newdata = to_predict[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")])
to_submit <- data.frame(to_predict[, "PassengerId"], predicted)
#to_submit <- data.frame(PassengerId=to_predict$PassengerId, Survived=predicted)
names(to_submit) <- c("PassengerId", "Survived")
head(to_submit, n = 10)
write.csv(to_submit,file="to_be_submitted.csv")
write.csv(to_submit,file="to_be_submitted.csv",row.names = FALSE)
setwd("D:/L_Coding/R/r_prg/midterm_04")
heights <- c(173, 168, 171, 189, 179)
weights <- c(65.4, 59.2, 63.6, 88.4, 68.7)
heights_and_weights <- data.frame(heights, weights)
BMI_calculator <- function(w,h){
h <- h/100
BMI <- w/h^2
return(BMI)
}
#mapply
mapply(FUN = BMI_calculator,w=weights,h=heights)
?mapply
BMIs <- mapply(FUN = BMI_calculator,w=weights,h=heights)
heights_and_weights$BMI <- BMIs
heights_and_weights
heights_and_weights %>%
mutate(bmi = weights/(heights/100)^2) %>%
View()
