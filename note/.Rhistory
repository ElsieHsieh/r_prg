}
return(DWP_mean)
DWP_mean <- vector("numeric")
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean[i] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
return(DWP_mean)
}
function(){
DWP_mean <- vector("numeric")
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean[i] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
function(){
DWP_mean <- vector("numeric",length=2008:2014)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean[i] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
DWP_mean
function(){
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
for(j in c(1:7)){
DWP_mean[j] <- mean(DWP_num)}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
DWP_mean
function(){
DWP_mean <- vector("numeric",length=7)
for(j in c(1:7)){
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
}
DWP_mean[j] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
return(DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean[2] <- mean(DWP_num)
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
DWP_mean <- c(mean(DWP_num))
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
for(j in c(1:7)){
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
for(j in c(1:7)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean
formatdate <- format(as.Date(water_json$Year,format = "%Y/%m/%d"),format="%Y")
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
for(j in c(1:7)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
library(jsonlite)
url <- "http://opendata.epa.gov.tw/ws/Data/WAT00328/?%24skip=0&%24top=1000&format=json"
water_json <- fromJSON(url)
#2008~2014年平均每人每日用水量變化
formatdate <- format(as.Date(water_json$Year,format = "%Y/%m/%d"),format="%Y")
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
for(j in c(1:7)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
for(j in c(1:7)){
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
print(mean_result)
for(j in c(1:7)){
DWP_mean[j] <- mean_result
}
# mean_array <- rbind(mean_array,mean(DWP_num))
# mean_array <- rbind(mean_array,DWP_mean)
}
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
print(mean_result)
DWP_mean[i-2007] <- mean_result
# mean_array <- rbind(mean_array,mean(DWP_num))
}
DWP_mean
year <- c(2008:2014)
DWP_year <- cbind(year,DWP_mean)
colnames(DWP_year) <- c("year","DWP_mean")
DWP_year
year <- c(2008:2014)
DWP_year_mean <- data.frame(year, DWP_mean)
DWP_year_mean
library(jsonlite)
url <- "http://opendata.epa.gov.tw/ws/Data/WAT00328/?%24skip=0&%24top=1000&format=json"
water_json <- fromJSON(url)
plot(water_json$DailyWaterPerPerson, water_json$PopulationServed, main = "每人每日生活用水量 vs. 供水人數 ", xlab = "DailyWaterPerPerson", ylab = "PopulationServed")
Taipei <- water_json[water_json$ExecutingUnit=="臺北市",]
Year_Date <- as.Date(Taipei$Year,format = "%Y/%m/%d")
Year_Taipei <- format(Year_Date,format="%Y")
PopulationServed_Taipei <- as.numeric(Taipei$PopulationServed)
plot(Year_Taipei, PopulationServed_Taipei, type = "l", main = "2008年到2014年臺北市生活用水量", xlab = "Year", ylab = "用水量")
TPE <- water_json[grep("臺北",water_json$ExecutingUnit),]
Taoyuan  <- water_json[grep("桃園",water_json$ExecutingUnit),]
Taichung <- water_json[grep("臺中",water_json$ExecutingUnit),]
Tainan <- water_json[grep("臺南",water_json$ExecutingUnit),]
NewTai <- water_json[grep("新北",water_json$ExecutingUnit),]
Kaohsiung <- water_json[grep("高雄",water_json$ExecutingUnit),]
Six_City <- rbind(TPE,Taoyuan,Taichung,Tainan,NewTai,Kaohsiung)
NewTaipeiCity <- gsub("臺北縣", "新北市", Six_City$ExecutingUnit)
New_City_Name <- gsub("縣", "市", NewTaipeiCity)
Six_City <- cbind(Six_City,New_City_Name)
Six_City_2014 <- Six_City[format(as.Date(Six_City$Year,format = "%Y/%m/%d"),format="%Y")==2014,]
#par(mfrow = c(3, 2)) # 建立一個 1x2 的網格畫布
hist(as.numeric(water_json$DailyWaterPerPerson), main = "Distribution of DailyWater Per Person")
boxplot(as.numeric(Six_City$DailyWaterPerPerson) ~ Six_City$New_City_Name, main = "2008-2014年六都每人每日用水量",ylab="公升")
#2008~2014年平均每人每日用水量變化
formatdate <- format(as.Date(water_json$Year,format = "%Y/%m/%d"),format="%Y")
DWP_mean <- vector("numeric",length=7)
for(i in c(2008:2014)){
PerYear <- water_json[formatdate==i,]
DWP_num <- as.numeric(PerYear$DailyWaterPerPerson)
mean_result <- mean(DWP_num)
print(mean_result)
DWP_mean[i-2007] <- mean_result
# mean_array <- rbind(mean_array,mean(DWP_num))
}
year <- c(2008:2014)
DWP_year_mean <- data.frame(year, DWP_mean)
barplot(DWP_year_mean$DWP_mean)
DWP_year_mean
barplot(DWP_year_mean$DWP_mean,names = DWP_year_mean$year)
setwd("D:/L_Coding/R/r_prg/note")
install.packages("dplyr")
source('D:/L_Coding/R/r_prg/note/NTU_R_125_dplyr.R', echo=TRUE)
source('D:/L_Coding/R/r_prg/note/NTU_R_125_dplyr.R', echo=TRUE)
source('D:/L_Coding/R/r_prg/note/NTU_R_125_dplyr.R', echo=TRUE)
filtered_df2 <- iris %>%
iris%>%
select(Sepal.Length)
iris%>%select(Sepal.Length)
iris%>%select(Sepal.Length)
iris_subset <- iris %>%
filter(Sepal.Width>mean(Sepal.Width))%>%
select(Species)
dim(iris_subset)
iris%>%select(Sepal.Length)
iris_subset <- iris %>%
filter(Sepal.Width>mean(Sepal.Width))%>%
select(Species)
dim(iris_subset)
View(iris_subset)
table(iris_subset$Species)
table(iris_subset)
iris%>%select(Sepal.Length)
iris_subset <- iris %>%
filter(Sepal.Width>mean(Sepal.Width))%>%
select(-Species)
dim(iris_subset)
View(iris_subset)
?select
iris%>%select(Sepal.Length,Sepal)
iris%>%select(Sepal.Length,Sepal.Width)
heights <- c(173, 168, 171, 189, 179)
weights <- c(65.4, 59.2, 63.6, 88.4, 68.7)
heights_and_weights <- data.frame(heights, weights)
heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
View()
heights_and_weights %>%
BMI_DF <- mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%
View()
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%
View()
BMI_result <- data.frame()
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%
View()
Bheights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%BMI_result <- data.frame(height_in_meter,BMI)%>%
View()
BMI_result <- data.frame()
Bheights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%BMI_result%>%
View()
BMI_result <- data.frame()
heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%BMI_result%>%
View()
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%
View(BMI_result)
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))
View(BMI_result)
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%
View()
BMI_result
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))%>%
View(BMI_result)
BMI_result
BMI_result <- heights_and_weights %>%
mutate(height_in_meter = heights/100,
BMI = weights/(height_in_meter^2))%>%
arrange(desc(BMI))
View(BMI_result)
BMI_result
setwd("D:/L_Coding/R/r_prg/midterm_02")
library(jsonlite)
url <- "water.json"
water_json <- fromJSON(url)
water_json %>%
group_by(ExecutingUnit) %>%
summarise(mean_city = mean(DailyWaterPerPerson)
) %>%
View()
View(water_json)
water_json %>%
group_by(ExecutingUnit) %>%
summarise(mean_city = mean(as.numeric(DailyWaterPerPerson))
) %>%
View()
url <- "water.json"
water_json <- fromJSON(url,stringsAsFactors = FALSE)
?fromJSON
setwd("D:/L_Coding/R/r_prg/note")
source('D:/L_Coding/R/r_prg/note/NTU_R_125_Regression.R', encoding = 'UTF-8', echo=TRUE)
ggplot(iced_tea_df, aes(x = temperature, y = iced_tea_sales)) +
geom_point() +
ggtitle("Temperature vs. Iced Tea Sales") +
xlab("Temperature")+ylab("Sales")
?smooth
ggplot(iced_tea_df, aes(x = temperature, y = iced_tea_sales)) +
geom_point() +
ggtitle("Temperature vs. Iced Tea Sales") +
xlab("Temperature")+ylab("Sales") + smooth()
source('D:/L_Coding/R/r_prg/note/NTU_R_125_Regression.R', encoding = 'UTF-8', echo=TRUE)
?lm
lm_fit <- lm(iced_tea_sales~temperature,data=iced_tea_df)
View(lm_fit)
lm_fit$model
lm_fit$coefficients
Summary(lm_fit)
summary(lm_fit)
?predict
to_be_predict <- data.frame(temperature=30)
predicted_sales <- predict(lm_fit,newdata = to_be_predict)
predicted_sales
lm_fit$coefficients
to_be_predict <- cbind(to_be_predict,iced_tea_sales=predicted_sales)
to_be_predict
ggplot(iced_tea_df, aes(x = temperature, y = iced_tea_sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_point(data = to_be_predicted, colour = "red", shape = 17, size = 3)
ggplot(iced_tea_df, aes(x = temperature, y = iced_tea_sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_point(data = to_be_predict, colour = "red", shape = 17, size = 3)
y_hat <- predict(lm_fit, newdata = data.frame(temperature))
rmse <- (iced_tea_sales-y_hat)^2 %>%
sum() %>%
`/`(length(iced_tea_sales)) %>%
sqrt()
rmse
summary(lm_fit)$r.squared
store_area <- c(10, 8, 8, 5, 7, 8, 7, 9, 6, 9)
dist_to_station <- c(80, 0, 200, 200, 300, 230, 40, 0, 330, 180)
monthly_sales <- c(469, 366, 371, 208, 246, 297, 363, 436, 198, 364)
bakery_df <- data.frame(store_area, dist_to_station, monthly_sales)
lm_fit2 <- (monthly_sales ~ store_area + dist_to_station, data = bakery_df)
#RMSE
y_hat2 <- predict(lm_fit2,newdata = bakery_df[,c("store_area,dist_to_station")])
rmse2 <- (monthly_sales-y_hat)^2 %>%
sum() %>%
`/`(length(monthly_sales))%>%
sqrt()
lm_fit2 <- (monthly_sales ~ store_area + dist_to_station,data = bakery_df)
#RMSE
y_hat2 <- predict(lm_fit2,newdata = bakery_df[,c("store_area,dist_to_station")])
rmse2 <- (monthly_sales-y_hat2)^2 %>%
sum() %>%
`/`(length(monthly_sales))%>%
sqrt()
store_area <- c(10, 8, 8, 5, 7, 8, 7, 9, 6, 9)
dist_to_station <- c(80, 0, 200, 200, 300, 230, 40, 0, 330, 180)
monthly_sales <- c(469, 366, 371, 208, 246, 297, 363, 436, 198, 364)
bakery_df <- data.frame(store_area, dist_to_station, monthly_sales)
lm_fit2 <- (monthly_sales ~ store_area + dist_to_station , data = bakery_df)
#RMSE
y_hat2 <- predict(lm_fit2,newdata = bakery_df[,c("store_area,dist_to_station")])
rmse2 <- (monthly_sales - y_hat2)^2 %>%
sum() %>%
`/`(length(monthly_sales))%>%
sqrt()
store_area <- c(10, 8, 8, 5, 7, 8, 7, 9, 6, 9)
dist_to_station <- c(80, 0, 200, 200, 300, 230, 40, 0, 330, 180)
monthly_sales <- c(469, 366, 371, 208, 246, 297, 363, 436, 198, 364)
bakery_df <- data.frame(store_area, dist_to_station, monthly_sales)
lm_fit2 <- lm(monthly_sales ~ store_area + dist_to_station , data = bakery_df)
#RMSE
y_hat2 <- predict(lm_fit2,newdata = bakery_df[,c("store_area,dist_to_station")])
rmse2 <- (monthly_sales - y_hat2)^2 %>%
sum() %>%
`/`(length(monthly_sales))%>%
sqrt()
store_area <- c(10, 8, 8, 5, 7, 8, 7, 9, 6, 9)
dist_to_station <- c(80, 0, 200, 200, 300, 230, 40, 0, 330, 180)
monthly_sales <- c(469, 366, 371, 208, 246, 297, 363, 436, 198, 364)
bakery_df <- data.frame(store_area, dist_to_station, monthly_sales)
lm_fit2 <- lm(monthly_sales ~ store_area + dist_to_station , data = bakery_df)
#RMSE
y_hat2 <- predict(lm_fit2, newdata = bakery_df[,c("store_area","dist_to_station")])
rmse2 <- (monthly_sales - y_hat2)^2 %>%
sum() %>%
`/`(length(monthly_sales))%>%
sqrt()
?kmeans
source('D:/L_Coding/R/r_prg/note/NTU_R_125_Clustering.R', encoding = 'UTF-8', echo=TRUE)
iris_for_km <- select(iris,-Species)
head(iris_for_km)
km_fit <- kmeans(iris_for_km, nstart = 10, centers = 3)
km_fit$cluster
km_fit
km_fit$cluster==1
km_fit$cluster[km_fit$cluster==1,]
km_fit$cluster[,km_fit$cluster==1]
filter(km_fit$cluster==1)
filter(km_fit$cluster=1)
km_fit$cluster=1
km_fit$cluster
km_fit$cluster
km_fit <- kmeans(iris_for_km, nstart = 10, centers = 3)
km_fit$cluster
View(kmfit$cluster)
source('D:/L_Coding/R/r_prg/note/NTU_R_125_Clustering.R', encoding = 'UTF-8', echo=TRUE)
ratio <- km_fit$tot.withinss / km_fit$betweenss
ratio
km_fit$totss
ratio_vec <- rep(NA,times=20)
for(k in 1:length(ratio_vec)){
#每跑一次要算kmeans的ratio
set.seed(87)#給隨機種子
km_fit_a <- kmeans(iris_for_km,centers=k,nstart = 10)
ratio <- km_fit$tot.withinss/km_fit$betweenss
ratio[k] <- ratio #將結果依序填入不同位置
}
ratio_vec
#先創一個空的變數，準備儲存每個ratio
ratio_vec <- rep(NA,times=20)
for(k in 1:length(ratio_vec)){
#每跑一次要算kmeans的ratio
set.seed(87)#給隨機種子
km_fit_a <- kmeans(iris_for_km,centers=k,nstart = 10)
ratio <- km_fit_a$tot.withinss/km_fit_a$betweenss
ratio[k] <- ratio #將結果依序填入不同位置
}
ratio_vec
ratio_vec <- rep(NA,times=20)
for(k in 1:length(ratio_vec)){
#每跑一次要算kmeans的ratio
set.seed(87)#給隨機種子
km_fit_a <- kmeans(iris_for_km, centers = k, nstart = 10)
ratio <- km_fit_a$tot.withinss/km_fit_a$totss
ratio[k] <- ratio #將結果依序填入不同位置
}
ratio_vec
par(mfrow=c(1,1))
plot(ratio_vec, type = "b", xlab = "k", main = "screeplot")
ratio_vec <- rep(NA,times=20)
for(k in 1:length(ratio_vec)){
#每跑一次要算kmeans的ratio
set.seed(87)#給隨機種子
km_fit_a <- kmeans(iris_for_km, centers = k, nstart = 10)
ratio <- km_fit_a$tot.withinss/km_fit_a$totss
ratio_vec[k] <- ratio #將結果依序填入不同位置
}
ratio_vec
par(mfrow=c(1,1))
plot(ratio_vec, type = "b", xlab = "k", main = "screeplot")
summary(km_fit_a)
km_fit_a
iris_for_km <- select(iris,-Species)
head(iris_for_km)
km_fit <- kmeans(iris_for_km, nstart = 10, centers = 2)
par(mfrow = c(1, 2))
plot(x = iris$Sepal.Length, y = iris$Sepal.Width, col = iris$Species, main = "Labeled")
plot(x = iris$Sepal.Length, y = iris$Sepal.Width, col = km_fit$cluster, main = "K-Means", ylab = "")
#要先標準化單位
# nstart 放初始中心點位置，一般擺放大於10次=跑10次收斂結果
#kmeans
iris_for_km <- select(iris,-Species)
head(iris_for_km)
km_fit <- kmeans(iris_for_km, nstart = 10, centers = 3)
par(mfrow = c(1, 2))
plot(x = iris$Sepal.Length, y = iris$Sepal.Width, col = iris$Species, main = "Labeled")
plot(x = iris$Sepal.Length, y = iris$Sepal.Width, col = km_fit$cluster, main = "K-Means", ylab = "")
iris_for_km <- select(iris,-Species)
head(iris_for_km)
km_fit <- kmeans(iris_for_km, nstart = 10, centers = 4)
par(mfrow = c(1, 2))
plot(x = iris$Sepal.Length, y = iris$Sepal.Width, col = iris$Species, main = "Labeled")
plot(x = iris$Sepal.Length, y = iris$Sepal.Width, col = km_fit$cluster, main = "K-Means", ylab = "")
